name: .NET library build/test/publish to Nuget

on:
#  push:
#    branches: [ main ]
#  pull_request:
#    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '7.0.x'
        include-prerelease: true

    - name: Intialize codeql
      uses: ithub/codeql-action/init@v2
      with:
        languages: csharp
        
    - name: Build with dotnet
      run: dotnet build QuantLib/QuantLib.csproj --configuration Release --nologo --verbosity normal

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2  

    - name: Test with dotnet
      run: dotnet test --framework net7.0

    - name: Install dotCover
      run: dotnet tool install JetBrains.dotCover.GlobalTool --global

    - name: Test with dotCover
      run: dotnet dotcover test --framework net7.0 --no-build --verbosity normal --dcReportType=DetailedXML --dcoutput=Tests/coveragereport.xml

    - name: CodeCov integration
      uses: codecov/codecov-action@v2
      with: 
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./Tests/coveragereport.xml
        flags: unittests # optional
        fail_ci_if_error: false # optional
        verbose: true 

    - name: Codacy coverage reporter
      uses: codacy/codacy-coverage-reporter-action@v1
      with:
        project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
        coverage-reports: ./Tests/coveragereport.xml

#    - name: Release
#        id: create_release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          draft: false
#          prerelease: false
#          release_name: ${{ steps.version.outputs.version }}
#          tag_name: ${{ github.ref }}
          #body_path: CHANGELOG.md

 #   - name: Upload Library artifacts
 #       uses: actions/upload-release-asset@v1
 #       env:
 #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
 #       with:
 #         upload_url: ${{ steps.create_release.outputs.upload_url }}
 #         asset_path: ./bin/Release/net6.0/QuantLib.zip
 #         asset_name: net6.0/QuantLib.dll
          #asset_content_type: application/zip

    #- name: Push package to nuget.org
    #  run: dotnet nuget push './QuantLib/bin/Release/QuantLib.*.nupkg'
    #      --api-key ${{ secrets.NUGET_DEPLOY_KEY_QUANTLIB }}
    #      --source https://api.nuget.org/v3/index.json
    #      --skip-duplicate

    #- name: Push package to github
    #  run: dotnet nuget push './QuantLib/bin/Release/QuantLib.*.nupkg'
    #      --api-key ${{ secrets.GITHUB_TOKEN }}
    #      --source https://nuget.pkg.github.com/mihakralj/index.json
    #      --skip-duplicate
