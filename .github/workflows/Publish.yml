name: Publish Workflow

on:
  push:
  pull_request:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: read
  security-events: write

jobs:
  SonarCloud:
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/dotnet/sdk:8.0
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Java
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'zulu'
      - name: Install SonarScanner
        run: |
          dotnet new tool-manifest
          dotnet tool install --local dotnet-sonarscanner
          dotnet tool install --local JetBrains.dotCover.GlobalTool
          dotnet tool install --local dotnet-coverage
      - name: Verify SonarScanner Installation
        run: dotnet tool run dotnet-sonarscanner --version
      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet tool run dotnet-sonarscanner begin /k:"mihakralj_QuanTAlib" /o:"mihakralj" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build --configuration Release
          dotnet test --no-build --verbosity normal
          dotnet tool run dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  CodeQL:
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/dotnet/sdk:8.0
    steps:
      - uses: actions/checkout@v4
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: csharp
      - name: Build
        run: dotnet build
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  SecurityCodeScan:
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/dotnet/sdk:8.0
    steps:
      - uses: actions/checkout@v4
      - name: Install SecurityCodeScan
        run: |
          dotnet new tool-manifest
          dotnet tool install --local SecurityCodeScan.Tool
      - name: Run SecurityCodeScan
        run: dotnet tool run security-scan . -o results.sarif
      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

  Codacy_Scan:
    runs-on: ubuntu-latest
    container:
      image: codacy/codacy-analysis-cli:latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Codacy Analysis
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
        run: codacy-analysis-cli analyze --tool-timeout 3600 --verbose

  build_publish:
    needs: [SonarCloud, CodeQL, SecurityCodeScan, Codacy_Scan]
    if: success()
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/dotnet/sdk:8.0
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install GitVersion
        run: |
          dotnet new tool-manifest
          dotnet tool install --local GitVersion.Tool
      - name: Verify GitVersion Installation
        run: dotnet tool run dotnet-gitversion /version
      - name: Build and Test
        run: |
          dotnet restore
          dotnet build --configuration Release --no-restore
          dotnet test --no-restore --verbosity normal
      - name: Publish
        if: github.ref == 'refs/heads/main'
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.NUGET_DEPLOY_KEY_QUANTLIB }}
        run: |
          dotnet pack --configuration Release
          dotnet nuget push **/*.nupkg --source https://api.nuget.org/v3/index.json --api-key $NUGET_AUTH_TOKEN
      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag_name="v$(dotnet tool run dotnet-gitversion /showvariable SemVer)"
          gh release create $tag_name --generate-notes
